* Preamble
** Set Defaults

Decent window frame size upon startup.

#+begin_src emacs-lisp
    (if (display-graphic-p)
        (progn
          (setq default-frame-alist
                '(
                  (width . 135)
                  (height . 50)))))
#+end_src

Thin window edges.

#+begin_src emacs-lisp
(set-window-fringes nil 0 0)
(set-window-margins nil 0 0)
#+end_src

Select appropriate fonts per system.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "SF Mono-10.5"))
(set-face-attribute 'default t :font "SF Mono-10.5")
(set-face-attribute 'bold t :font "SF Mono-10.5")
(display-time-mode -1)
(display-battery-mode -1)
#+end_src

Defaults behaviour.

#+begin_src emacs-lisp
(setq-default
     custom-file (expand-file-name "custom.el" user-emacs-directory) ; custom (generated) lisp code location
     fill-column 80                          ; 80 char wide babbyyy
     delete-by-moving-to-trash t             ; delete by moving to trash
     select-enable-clipboard t               ; unify emacs and system clipboard
     sentence-end-double-space nil           ; single space after fullstop
     indent-tabs-mode nil                    ; sane whitespace, please
     initial-scratch-message ";; Scratch"    ; initial scratch message
     inhibit-splash-screen t                 ; hide welcome screen
     inhibit-startup-echo-area-message t     ; no echo area message
     buffer-file-coding-system 'utf-8-unix   ; utf8 encoding
     locale-coding-system 'utf-8-unix        ; utf8 encoding
     require-final-newline t                 ; add newline on buffer save
     display-line-numbers-type 'visual       ; set line numbers to relative
     display-line-numbers-grow-only t
     show-paren-delay 0                      ; no matching paren show delay
     gc-cons-threshold 100000000             ; increase consing before gc runs
     read-process-output-max (* 1024 1024)   ; increase max bytes read per chunk
     display-raw-bytes-as-hex t
     x-hyper-keysym 'ctrl                   ; pressing hyper simulates ctrl
     x-super-keysym 'ctrl)                   ; pressing hyper simulates ctrl

    (set-default-coding-systems 'utf-8-unix) ; utf8
    (prefer-coding-system 'utf-8-unix)       ; utf8
    (global-display-line-numbers-mode)       ; enable relative line numbers
    (global-hl-line-mode)                    ; enable hilight current line
    (show-paren-mode 1)                      ; enable show matching parens
    (scroll-bar-mode -1)                     ; hide scroll
    (menu-bar-mode -1)                       ; hide menu bar
    (tool-bar-mode -1)                       ; hide tool bar
    (fset 'yes-or-no-p 'y-or-n-p)            ; yes/no -> y/n
    (global-font-lock-mode 1)                ; force-enable font-face
#+end_src

Re-enable certain things we want per-system

#+begin_src emacs-lisp
(if (eq system-type 'darwin)
(when (display-graphic-p)
(menu-bar-mode 1)))
#+end_src

Add a ruler in modes we care about.

#+begin_src emacs-lisp
;; (setq display-fill-column-indicator-character ?\u2506) ; unused atm
(add-hook 'org-mode-hook #'display-fill-column-indicator-mode)
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
(add-hook 'markdown-mode-hook #'display-fill-column-indicator-mode)
#+end_src

Smooth (1 line at a time) scrolling via mouse, and prevent scrolling jumps.

#+begin_src emacs-lisp
(setq
 scroll-conservatively 1000                   ; only 'jump' when moving this far
 scroll-margin 4                              ; scroll N lines to screen edge
 scroll-step 1                                ; keyboard scroll one line at a time
 mouse-wheel-scroll-amount '(3 ((shift) . 3)) ; mouse scroll N lines
 mouse-wheel-progressive-speed nil            ; don't accelerate scrolling
 fast-but-imprecise-scrolling t               ; redraw immediately when scrolling (v)
 jit-lock-defer-time 0)
#+end_src

* Handling Packages, and Straight MELPA
** Straight

Alternative (to package.el) package manager.

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Use Package

Easily configure packages (not a package manager).

#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

* Packages
** No Littering

Remove all of the ~ and what not files that get scattered about, please.

#+begin_src emacs-lisp
(use-package no-littering
  :straight t)

(setq auto-save-file-name-transforms
  `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

** Org Mode

Latest Org mode for a safe bet.

#+begin_src emacs-lisp
  (use-package org
    :straight t
    :custom
    (org-adapt-indentation nil)
  (org-startup-folded "content")
  )
#+end_src

** Org Tempo

Brings back `<s` to create org inline scripts more easily.

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Boon

Ergonomic modal editing which also sticks to emacs conventions.

#+begin_src emacs-lisp
(use-package boon
:straight t
:init
(require 'boon-qwerty)
(require 'boon-tutorial)
(boon-mode)
:config
(setq boon-command-cursor-color "#F48FB1"
      boon-insert-cursor-color "#00FF00"))
; boon-special-cursor-color
; boon-default-cursor-color
#+end_src

** Whitespace

Highlight trailing whitespace for our watchful eyes.

#+begin_src emacs-lisp
(use-package whitespace
  :straight t
  :ensure nil
  :hook
  (prog-mode . whitespace-mode)
  (text-mode . whitespace-mode)
  :custom
  (whitespace-style '(face empty indentation::space tab trailing)))
#+end_src

** Rainbow Delimiters

Delimiters (such as parens) are different colours depending on how nested they are.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :straight t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Rainbow Mode

TODO: not working currently
Set face background of colour to that colour's value (basically swatch preview).

#+begin_src emacs-lisp
(use-package rainbow-mode
  :straight t
  :hook
  (prod-mode . rainbow-mode)
  :custom
  (rainbow-x-colors nil))
#+end_src

** Doom Themes

Theme.

#+begin_src emacs-lisp
  (use-package doom-themes
    :straight t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
   (doom-themes-org-config) ; improve org-mode's fontification
   ; (load-theme 'doom-ephemeral t)
    (load-theme 'doom-monokai-pro t)
    (set-face-background 'hl-line "#353136")
    (set-face-foreground 'line-number "#5E565F"))
#+end_src

** Sidebar

Dired-sidebar.

#+begin_src emacs-lisp
(use-package dired-sidebar
  :straight t
  :commands (dired-sidebar-toggle-sidebar))
#+end_src

** Which Key

Display a popup buffer if we take too long to input a command (we could be forgetting, so it helps).

#+begin_src emacs-lisp
 (use-package which-key
   :straight t
   :config
   (which-key-mode))
 #+end_src

** Highlight Indentation Guides

Highlight indentation bars for easier visual grepping.

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
  :straight t
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'column)
  (setq highlight-indent-guides-responsive 'top))
  ;; :init
  ;; (progn
  ;; (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)))
  ;; :hook (prog-mode . highlight-indent-guides-mode))
#+end_src

** Tree-Sitter

Better fontification (syntax highlighting).

#+begin_src emacs-lisp
(use-package tree-sitter
     :straight t)

     (use-package tree-sitter-langs
     :straight t)
#+end_src

** Smartparens

Match parenthesis but also more.

#+begin_src emacs-lisp
(use-package smartparens
:straight t)
#+end_src

** Markdown Mode

Markdown.

#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

** LSP Mode

Add Language Server Protocol support.

#+begin_src emacs-lisp
(use-package lsp-mode
:straight t
:init
(setq lsp-keymap-prefix "s-l")
(setq lsp-idle-delay 0.350)
:hook ((csharp-mode . lsp-deferred)
(lsp-mode . lsp-enable-which-key-integration))
:commands lsp)
#+end_src

** Lispy

Paredit et al but all-in-one.

# TODO : lispy-multiline and lispy-oneline not working

#+begin_src emacs-lisp
(use-package lispy
:straight t)
#+end_src

** Janet

A dynamic lisp-like-language and bytecode vm.

#+begin_src emacs-lisp
(use-package janet-mode
:straight t)
#+end_src

** CSharp

.NET C#

#+begin_src emacs-lisp
(use-package csharp-mode
:straight t
:config (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))
#+end_src

** YAML

YAML major mode.

#+begin_src emacs-lisp
(defun set-yaml-variable-name-face ()
  "Set font-lock-variable-name-face for missing syntax highlighting"
  (interactive)
  (set-face-foreground font-lock-variable-name-face "violet"))

(use-package yaml-mode
  :straight t
  :init
  (add-hook 'yaml-mode-hook
          (lambda () (run-hooks 'prog-mode-hook))
  (add-hook 'yaml-mode-hook 'set-yaml-variable-name-face)))
#+end_src

** Org-roam

Zettelkasten-style note taking with Org.

#+begin_src emacs-lisp
;(use-package org-roam
 ;     :straight t
  ;    :hook
   ;   (after-init . org-roam-setup)
    ;  :custom
     ; (org-roam-directory "/home/tsujp/Documents/org-roam-test")
      ;:bind (:map org-roam-mode-map
       ;       (("C-c n l" . org-roam)
        ;       ("C-c n f" . org-roam-find-file)
         ;      ("C-c n g" . org-roam-graph))
          ;    :map org-mode-map
           ;   (("C-c n i" . org-roam-insert))
            ;  (("C-c n I" . org-roam-insert-immediate))))
#+end_src

** Notmuch

Email.

#+begin_src emacs-lisp
;(use-package mu4e
;  :straight ( :host github 
;                :repo "djcb/mu"  
;                :branch "master"
;                :files ("mu4e/*")   
;                :pre-build (("./autogen.sh") ("make"))) 
;    :custom   (mu4e-mu-binary (expand-file-name "mu/mu" (straight--repos-dir "mu"))))
      (use-package notmuch
        :straight t)
#+end_src
