* Preamble
** Package boilerplate, MELPA

Please sir can I have some packages?

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/"))
#+end_src

Always pass `:ensure t` to `use-package`.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

** Defaults
*** Window

Decent window frame size upon startup.

#+begin_src emacs-lisp
    (if (display-graphic-p)
        (progn
          (setq default-frame-alist
                '(
                  (width . 135)
                  (height . 50)))))
#+end_src

Thin window edges.

#+begin_src emacs-lisp
(set-window-fringes nil 0 0)
(set-window-margins nil 0 0)
#+end_src

*** Typography

**** Font

Select appropriate fonts per system.

#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (set-face-attribute 'default nil :family "Zed Mono Medium Extended")
  (set-face-attribute 'default nil :height 150)
  (set-face-attribute 'default nil :weight 'Medium)
)
(display-time-mode -1)
(display-battery-mode -1)
#+end_src

**** Lines, Padding, Margin

#+begin_src emacs-lisp
 
#+end_src

*** General

Defaults behaviour.

#+begin_src emacs-lisp
(setq-default
     custom-file (expand-file-name "custom.el" user-emacs-directory) ; custom (generated) lisp code location
     fill-column 80                          ; 80 char wide babbyyy
     delete-by-moving-to-trash t             ; delete by moving to trash
     select-enable-clipboard t               ; unify emacs and system clipboard
     sentence-end-double-space nil           ; single space after fullstop
     indent-tabs-mode nil                    ; sane whitespace, please
     initial-scratch-message ";; Scratch"    ; initial scratch message
     inhibit-splash-screen t                 ; hide welcome screen
     inhibit-startup-echo-area-message t     ; no echo area message
     buffer-file-coding-system 'utf-8-unix   ; utf8 encoding
     locale-coding-system 'utf-8-unix        ; utf8 encoding
     require-final-newline t                 ; add newline on buffer save
     display-line-numbers-type 'visual       ; set line numbers to relative
     display-line-numbers-grow-only t
     show-paren-delay 0                      ; no matching paren show delay
     gc-cons-threshold 100000000             ; increase consing before gc runs
     read-process-output-max (* 1024 1024)   ; increase max bytes read per chunk
     display-raw-bytes-as-hex t
     x-hyper-keysym 'ctrl                   ; pressing hyper simulates ctrl
     x-super-keysym 'ctrl)                   ; pressing hyper simulates ctrl

    (set-default-coding-systems 'utf-8-unix) ; utf8
    (prefer-coding-system 'utf-8-unix)       ; utf8
    (global-display-line-numbers-mode)       ; enable relative line numbers
    (global-hl-line-mode)                    ; enable hilight current line
    (show-paren-mode 1)                      ; enable show matching parens
    (scroll-bar-mode -1)                     ; hide scroll
    (menu-bar-mode -1)                       ; hide menu bar
    (tool-bar-mode -1)                       ; hide tool bar
    (fset 'yes-or-no-p 'y-or-n-p)            ; yes/no -> y/n
    (global-font-lock-mode 1)                ; force-enable font-face
#+end_src

*** macOS Specific

Enable menu-bar mode on macOS.

#+begin_src emacs-lisp
(if (eq system-type 'darwin)
(when (display-graphic-p)
(menu-bar-mode 1)))
#+end_src

*** Rule

Add a rule in modes we care about.

#+begin_src emacs-lisp
  (setq display-fill-column-indicator-character ?\u2502) ; unused atm
  (add-hook 'org-mode-hook #'display-fill-column-indicator-mode)
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
  (add-hook 'markdown-mode-hook #'display-fill-column-indicator-mode)
#+end_src

*** Scrolling

Smooth (1 line at a time) scrolling via mouse, and prevent scrolling jumps.

#+begin_src emacs-lisp
(setq
 scroll-conservatively 1000                   ; only 'jump' when moving this far
 scroll-margin 4                              ; scroll N lines to screen edge
 scroll-step 1                                ; keyboard scroll one line at a time
 mouse-wheel-scroll-amount '(3 ((shift) . 3)) ; mouse scroll N lines
 mouse-wheel-progressive-speed nil            ; don't accelerate scrolling
 fast-but-imprecise-scrolling t               ; redraw immediately when scrolling (v)
 jit-lock-defer-time 0)
#+end_src

* Packages
** No Littering

Remove all of the ~ and what not files that get scattered about, please.

#+begin_src emacs-lisp
    ; Configuration files default: no-littering-etc-directoy as `etc/` under user-emacs-directory
    ; Persistent data files default: no-littering-var-directory as `var/` under user-emacs-directory
    (use-package no-littering
      :init
        (setq no-littering-etc-directory
              (expand-file-name "config/" user-emacs-directory))
        (setq no-littering-var-directory
              (expand-file-name "data/" user-emacs-directory))
        :config
                                            ; Store auto-save files under the no-littering-var-directory.
        (setq auto-save-file-name-transforms
              `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

** Org Mode

Even though Org Mode is included in emacs, let's install the latest we can.

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-adapt-indentation nil)
  (org-startup-folded "content")
  )
#+end_src

** Whitespace

Highlight trailing whitespace for our watchful eyes.

#+begin_src emacs-lisp
(use-package whitespace
  :hook
  (prog-mode . whitespace-mode)
  (text-mode . whitespace-mode)
  :custom
  (whitespace-style '(face empty indentation::space tab trailing)))
#+end_src

** Rainbow Delimiters

Delimiters (such as parens) are different colours depending on how nested they are.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Doom Themes

Theme.

#+begin_src emacs-lisp
          (use-package doom-themes
            :config
            (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
                  doom-themes-enable-italic nil) ; if nil, italics is universally disabled

            (load-theme 'doom-monokai-ristretto t)
            ; TODO: Fix the line numbering here.
            (set-face-background 'hl-line "#353136")
            (set-face-foreground 'line-number "#5E565F")
  (doom-themes-org-config) ; improve org-mode's fontification
            )
#+end_src

** Evil

Vim emulation in Emacs.

#+begin_src emacs-lisp
                 (use-package evil
             :init
             (setq blink-cursor-mode 0 ; Keep cursor blinking forever.

      ; Customise Evil cursors.
      ; Since "mode" is reserved in Emacs, "state" here is equivalent to a vim mode.
      evil-normal-state-cursor '(box "#BFB3B5") ;; Vim's normal mode equivalent.
             evil-insert-state-cursor '((bar . 2) "#FFFFFF") ;; Vim's insert.
             evil-visual-state-cursor '(box "#85DACC") ;; Vim's visual.
             evil-motion-state-cursor '(box "red") ;; TODO Motions available but no editing.
             evil-replace-state-cursor '(box "red") ;; TODO Similar to insert but replaces text instead of inserting.
             evil-operator-state-cursor '(box "red") ;; TODO After entering operator but before entering motion or text object.
  evil-emacs-state-cursor '(box "red") ;; TODO Mimics Emacs default by defaulting all Evil bindings except C-z to return to normal mode.

  )
             )
                 (evil-mode 1)

#+end_src
